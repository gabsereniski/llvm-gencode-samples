// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/Pass.h>
#include <llvm/PassManager.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Verifier.h>
#include <llvm/IR/BasicBlock.h>
#include <llvm/IR/CallingConv.h>
#include <llvm/IR/Constants.h>
#include <llvm/IR/DerivedTypes.h>
#include <llvm/IR/Function.h>
#include <llvm/IR/GlobalVariable.h>
#include <llvm/IR/IRPrintingPasses.h>
#include <llvm/IR/InlineAsm.h>
#include <llvm/IR/Instructions.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/Module.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <algorithm>
using namespace llvm;

Module* makeLLVMModule();

int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}


Module* makeLLVMModule() {
 // Module Construction
 Module* mod = new Module("out.bc", getGlobalContext());
 
 // Type Definitions
 std::vector<Type*>FuncTy_0_args;
 FuncTy_0_args.push_back(IntegerType::get(mod->getContext(), 64));
 FuncTy_0_args.push_back(IntegerType::get(mod->getContext(), 64));
 FunctionType* FuncTy_0 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 64),
  /*Params=*/FuncTy_0_args,
  /*isVarArg=*/false);
 
 std::vector<Type*>FuncTy_1_args;
 FunctionType* FuncTy_1 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 64),
  /*Params=*/FuncTy_1_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_2 = PointerType::get(IntegerType::get(mod->getContext(), 64), 0);
 
 PointerType* PointerTy_3 = PointerType::get(FuncTy_0, 0);
 
 
 // Function Declarations
 
 Function* func_soma = mod->getFunction("soma");
 if (!func_soma) {
 func_soma = Function::Create(
  /*Type=*/FuncTy_0,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"soma", mod); 
 func_soma->setCallingConv(CallingConv::C);
 }
 AttributeSet func_soma_PAL;
 func_soma->setAttributes(func_soma_PAL);
 
 Function* func_main = mod->getFunction("main");
 if (!func_main) {
 func_main = Function::Create(
  /*Type=*/FuncTy_1,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"main", mod); 
 func_main->setCallingConv(CallingConv::C);
 }
 AttributeSet func_main_PAL;
 func_main->setAttributes(func_main_PAL);
 
 // Global Variable Declarations

 
 // Constant Definitions
 ConstantInt* const_int32_4 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
 ConstantInt* const_int64_5 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("0"), 10));
 ConstantInt* const_int64_6 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("1"), 10));
 ConstantInt* const_int64_7 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("2"), 10));
 
 // Global Variable Definitions
 
 // Function Definitions
 
 // Function: soma (func_soma)
 {
  Function::arg_iterator args = func_soma->arg_begin();
  Value* int64_8 = args++;
  Value* int64_9 = args++;
  
  BasicBlock* label_entry = BasicBlock::Create(mod->getContext(), "entry",func_soma,0);
  BasicBlock* label_exit = BasicBlock::Create(mod->getContext(), "exit",func_soma,0);
  
  // Block entry (label_entry)
  BinaryOperator* int64_tmp = BinaryOperator::Create(Instruction::Add, int64_8, int64_9, "tmp", label_entry);
  BranchInst::Create(label_exit, label_entry);
  
  // Block exit (label_exit)
  ReturnInst::Create(mod->getContext(), int64_tmp, label_exit);
  
 }
 
 // Function: main (func_main)
 {
  
  BasicBlock* label_entry_12 = BasicBlock::Create(mod->getContext(), "entry",func_main,0);
  BasicBlock* label_exit_13 = BasicBlock::Create(mod->getContext(), "exit",func_main,0);
  
  // Block entry (label_entry_12)
  AllocaInst* ptr_retorno = new AllocaInst(IntegerType::get(mod->getContext(), 64), "retorno", label_entry_12);
  StoreInst* void_14 = new StoreInst(const_int64_5, ptr_retorno, false, label_entry_12);
  AllocaInst* ptr_a = new AllocaInst(IntegerType::get(mod->getContext(), 64), "a", label_entry_12);
  AllocaInst* ptr_b = new AllocaInst(IntegerType::get(mod->getContext(), 64), "b", label_entry_12);
  StoreInst* void_15 = new StoreInst(const_int64_6, ptr_a, false, label_entry_12);
  StoreInst* void_16 = new StoreInst(const_int64_7, ptr_b, false, label_entry_12);
  LoadInst* int64_17 = new LoadInst(ptr_a, "", false, label_entry_12);
  LoadInst* int64_18 = new LoadInst(ptr_b, "", false, label_entry_12);
  std::vector<Value*> int64_res_params;
  int64_res_params.push_back(int64_17);
  int64_res_params.push_back(int64_18);
  CallInst* int64_res = CallInst::Create(func_soma, int64_res_params, "res", label_entry_12);
  int64_res->setCallingConv(CallingConv::C);
  int64_res->setTailCall(false);
  AttributeSet int64_res_PAL;
  int64_res->setAttributes(int64_res_PAL);
  
  StoreInst* void_19 = new StoreInst(int64_res, ptr_retorno, false, label_entry_12);
  BranchInst::Create(label_exit_13, label_entry_12);
  
  // Block exit (label_exit_13)
  LoadInst* int64_21 = new LoadInst(ptr_retorno, "", false, label_exit_13);
  ReturnInst::Create(mod->getContext(), int64_21, label_exit_13);
  
 }
 
 return mod;
}
